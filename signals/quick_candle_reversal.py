
"""
Quick Candle Reversal - Detec√ß√£o r√°pida de revers√£o por padr√µes de candles
Identifica padr√µes de revers√£o espec√≠ficos para Day Trade
"""

import pandas as pd
import numpy as np
from typing import Dict, Optional
from utils.logger import logger

def analyze_candle_pattern(candle: Dict) -> Dict:
    """
    Analisa padr√£o individual do candle
    
    Args:
        candle: Dict com 'open', 'high', 'low', 'close'
    
    Returns:
        dict: An√°lise detalhada do candle
    """
    try:
        o, h, l, c = candle['open'], candle['high'], candle['low'], candle['close']
        
        # C√°lculos b√°sicos
        body_size = abs(c - o)
        total_range = h - l
        upper_shadow = h - max(o, c)
        lower_shadow = min(o, c) - l
        
        if total_range == 0:
            return {'pattern': 'INVALID', 'strength': 0}
        
        # Ratios importantes
        body_ratio = body_size / total_range
        upper_shadow_ratio = upper_shadow / total_range
        lower_shadow_ratio = lower_shadow / total_range
        
        return {
            'body_size': body_size,
            'total_range': total_range,
            'body_ratio': body_ratio,
            'upper_shadow_ratio': upper_shadow_ratio,
            'lower_shadow_ratio': lower_shadow_ratio,
            'is_bullish': c > o,
            'is_bearish': c < o,
            'is_doji': body_ratio < 0.1
        }
        
    except Exception as e:
        logger.error(f"Erro na an√°lise do candle: {e}")
        return {'pattern': 'ERROR', 'strength': 0}

def quick_candle_reversal(candle: Dict) -> str:
    """
    Detecta padr√µes de revers√£o r√°pida em candles individuais
    
    Args:
        candle: Dict com dados OHLC do candle
    
    Returns:
        str: Tipo de revers√£o detectada
    """
    try:
        analysis = analyze_candle_pattern(candle)
        
        if analysis['pattern'] in ['INVALID', 'ERROR']:
            return 'NEUTRAL'
        
        body_ratio = analysis['body_ratio']
        upper_shadow_ratio = analysis['upper_shadow_ratio']
        lower_shadow_ratio = analysis['lower_shadow_ratio']
        
        o, h, l, c = candle['open'], candle['high'], candle['low'], candle['close']
        
        # Hammer / Doji de fundo (Bullish Reversal)
        if (body_ratio < 0.3 and 
            lower_shadow_ratio > 0.5 and 
            upper_shadow_ratio < 0.2 and
            c > l + 0.7 * (h - l)):
            return 'BULLISH_REVERSAL'
        
        # Shooting Star / Doji de topo (Bearish Reversal)
        elif (body_ratio < 0.3 and 
              upper_shadow_ratio > 0.5 and 
              lower_shadow_ratio < 0.2 and
              c < l + 0.3 * (h - l)):
            return 'BEARISH_REVERSAL'
        
        # Engulfing Bullish simples (precisa do candle anterior)
        elif analysis['is_bullish'] and body_ratio > 0.7:
            return 'STRONG_BULLISH'
        
        # Engulfing Bearish simples
        elif analysis['is_bearish'] and body_ratio > 0.7:
            return 'STRONG_BEARISH'
        
        # Doji (indecis√£o)
        elif analysis['is_doji']:
            return 'DOJI_INDECISION'
        
        return 'NEUTRAL'
        
    except Exception as e:
        logger.error(f"Erro na detec√ß√£o de revers√£o: {e}")
        return 'NEUTRAL'

def analyze_multi_candle_pattern(df: pd.DataFrame, lookback: int = 3) -> Dict:
    """
    Analisa padr√µes de m√∫ltiplos candles para revers√µes
    
    Args:
        df: DataFrame com dados OHLCV
        lookback: N√∫mero de candles para analisar
    
    Returns:
        dict: Padr√µes detectados
    """
    try:
        if len(df) < lookback:
            return {'pattern': 'INSUFFICIENT_DATA', 'strength': 0}
        
        recent_candles = df.tail(lookback)
        patterns = []
        
        for i, (_, candle) in enumerate(recent_candles.iterrows()):
            candle_dict = {
                'open': candle['open'],
                'high': candle['high'], 
                'low': candle['low'],
                'close': candle['close']
            }
            pattern = quick_candle_reversal(candle_dict)
            patterns.append(pattern)
        
        # Detecta padr√µes compostos
        if len(patterns) >= 2:
            last_two = patterns[-2:]
            
            # Duas revers√µes bullish consecutivas
            if all('BULLISH' in p for p in last_two):
                return {'pattern': 'STRONG_BULLISH_MOMENTUM', 'strength': 0.8}
            
            # Duas revers√µes bearish consecutivas  
            elif all('BEARISH' in p for p in last_two):
                return {'pattern': 'STRONG_BEARISH_MOMENTUM', 'strength': 0.8}
            
            # Indecis√£o seguida de dire√ß√£o
            elif 'DOJI' in last_two[0] and 'BULLISH' in last_two[1]:
                return {'pattern': 'BULLISH_BREAKOUT', 'strength': 0.7}
            
            elif 'DOJI' in last_two[0] and 'BEARISH' in last_two[1]:
                return {'pattern': 'BEARISH_BREAKOUT', 'strength': 0.7}
        
        # Padr√£o do √∫ltimo candle
        last_pattern = patterns[-1] if patterns else 'NEUTRAL'
        strength = 0.6 if 'REVERSAL' in last_pattern else 0.3
        
        return {'pattern': last_pattern, 'strength': strength}
        
    except Exception as e:
        logger.error(f"Erro na an√°lise multi-candle: {e}")
        return {'pattern': 'ERROR', 'strength': 0}

def validate_reversal_signal(df: pd.DataFrame, intended_direction: str) -> bool:
    """
    Valida se padr√µes de candle suportam a dire√ß√£o pretendida
    
    Args:
        df: DataFrame com dados
        intended_direction: 'BUY' ou 'SELL'
    
    Returns:
        bool: True se padr√µes suportam a dire√ß√£o
    """
    try:
        pattern_analysis = analyze_multi_candle_pattern(df)
        pattern = pattern_analysis.get('pattern', 'NEUTRAL')
        strength = pattern_analysis.get('strength', 0)
        
        # Para sinais de compra
        if intended_direction == 'BUY':
            bullish_patterns = [
                'BULLISH_REVERSAL', 'STRONG_BULLISH', 
                'STRONG_BULLISH_MOMENTUM', 'BULLISH_BREAKOUT'
            ]
            is_supported = any(bp in pattern for bp in bullish_patterns)
            
        # Para sinais de venda
        elif intended_direction == 'SELL':
            bearish_patterns = [
                'BEARISH_REVERSAL', 'STRONG_BEARISH',
                'STRONG_BEARISH_MOMENTUM', 'BEARISH_BREAKOUT'
            ]
            is_supported = any(bp in pattern for bp in bearish_patterns)
            
        else:
            return False
        
        # Requer for√ßa m√≠nima
        min_strength_required = 0.5
        final_validation = is_supported and strength >= min_strength_required
        
        logger.info(f"üïØÔ∏è Padr√£o: {pattern}, For√ßa: {strength:.2f}, Suporta {intended_direction}: {final_validation}")
        
        return final_validation
        
    except Exception as e:
        logger.error(f"Erro na valida√ß√£o de revers√£o: {e}")
        return False

def get_candle_reversal_score(df: pd.DataFrame) -> float:
    """
    Calcula score de qualidade dos padr√µes de candle (0.0 a 1.0)
    
    Returns:
        float: Score de qualidade dos padr√µes
    """
    try:
        pattern_analysis = analyze_multi_candle_pattern(df)
        base_strength = pattern_analysis.get('strength', 0)
        
        # An√°lise do √∫ltimo candle
        if len(df) > 0:
            last_candle = {
                'open': df['open'].iloc[-1],
                'high': df['high'].iloc[-1],
                'low': df['low'].iloc[-1], 
                'close': df['close'].iloc[-1]
            }
            
            candle_analysis = analyze_candle_pattern(last_candle)
            
            # Bonus para candles com bom body ratio
            if 0.3 <= candle_analysis.get('body_ratio', 0) <= 0.8:
                base_strength += 0.1
            
            # Bonus para candles definitivos (n√£o doji)
            if not candle_analysis.get('is_doji', True):
                base_strength += 0.1
        
        return min(base_strength, 1.0)
        
    except Exception as e:
        logger.error(f"Erro no c√°lculo do score de candle: {e}")
        return 0.0
